"""
✨ `Comment_KeyOutput` returns the primary key fields of table type `Comment`.

It has the same format as `Comment_Key`, but is only used as mutation return value.
"""
scalar Comment_KeyOutput
"""
✨ `Like_KeyOutput` returns the primary key fields of table type `Like`.

It has the same format as `Like_Key`, but is only used as mutation return value.
"""
scalar Like_KeyOutput
"""
✨ `Post_KeyOutput` returns the primary key fields of table type `Post`.

It has the same format as `Post_Key`, but is only used as mutation return value.
"""
scalar Post_KeyOutput
"""
✨ `User_KeyOutput` returns the primary key fields of table type `User`.

It has the same format as `User_Key`, but is only used as mutation return value.
"""
scalar User_KeyOutput
"""
✨ Generated data input type for table 'Comment'. It includes all necessary fields for creating or upserting rows into table.
"""
input Comment_Data {
  """
  ✨ Generated from Field `Comment`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Comment`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Comment`.`authorId` of type `UUID!`
  """
  authorId: UUID
  """
  ✨ `_expr` server value variant of `authorId` (✨ Generated from Field `Comment`.`authorId` of type `UUID!`)
  """
  authorId_expr: UUID_Expr
  """
  ✨ Generated from Field `Comment`.`postId` of type `UUID!`
  """
  postId: UUID
  """
  ✨ `_expr` server value variant of `postId` (✨ Generated from Field `Comment`.`postId` of type `UUID!`)
  """
  postId_expr: UUID_Expr
  """
  ✨ Generated from Field `Comment`.`author` of type `User!`
  """
  author: User_Key
  """
  ✨ Generated from Field `Comment`.`post` of type `Post!`
  """
  post: Post_Key
  """
  ✨ Generated from Field `Comment`.`content` of type `String!`
  """
  content: String
  """
  ✨ `_expr` server value variant of `content` (✨ Generated from Field `Comment`.`content` of type `String!`)
  """
  content_expr: String_Expr
  """
  ✨ Generated from Field `Comment`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `Comment`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `Comment`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
}
"""
✨ Generated filter input type for table 'Comment'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Comment_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Comment_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Comment_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Comment_Filter!]
  """
  ✨ Generated from Field `Comment`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Comment`.`authorId` of type `UUID!`
  """
  authorId: UUID_Filter
  """
  ✨ Generated from Field `Comment`.`postId` of type `UUID!`
  """
  postId: UUID_Filter
  """
  ✨ Generated from Field `Comment`.`author` of type `User!`
  """
  author: User_Filter
  """
  ✨ Generated from Field `Comment`.`post` of type `Post!`
  """
  post: Post_Filter
  """
  ✨ Generated from Field `Comment`.`content` of type `String!`
  """
  content: String_Filter
  """
  ✨ Generated from Field `Comment`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
}
"""
✨ Generated first-row input type for table 'Comment'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Comment_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Comment_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Comment_Filter
}
"""
✨ Generated key input type for table 'Comment'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Comment_Key {
  """
  ✨ Generated from Field `Comment`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Comment`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Comment'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Comment_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Comment_Filter
}
"""
✨ Generated order input type for table 'Comment'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Comment_Order {
  """
  ✨ Generated from Field `Comment`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Comment`.`authorId` of type `UUID!`
  """
  authorId: OrderDirection
  """
  ✨ Generated from Field `Comment`.`postId` of type `UUID!`
  """
  postId: OrderDirection
  """
  ✨ Generated from Field `Comment`.`author` of type `User!`
  """
  author: User_Order
  """
  ✨ Generated from Field `Comment`.`post` of type `Post!`
  """
  post: Post_Order
  """
  ✨ Generated from Field `Comment`.`content` of type `String!`
  """
  content: OrderDirection
  """
  ✨ Generated from Field `Comment`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
}
"""
✨ Generated data input type for table 'Like'. It includes all necessary fields for creating or upserting rows into table.
"""
input Like_Data {
  """
  ✨ Generated from Field `Like`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Like`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Like`.`postId` of type `UUID!`
  """
  postId: UUID
  """
  ✨ `_expr` server value variant of `postId` (✨ Generated from Field `Like`.`postId` of type `UUID!`)
  """
  postId_expr: UUID_Expr
  """
  ✨ Generated from Field `Like`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `Like`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `Like`.`post` of type `Post!`
  """
  post: Post_Key
  """
  ✨ Generated from Field `Like`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'Like'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Like_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Like_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Like_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Like_Filter!]
  """
  ✨ Generated from Field `Like`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Like`.`postId` of type `UUID!`
  """
  postId: UUID_Filter
  """
  ✨ Generated from Field `Like`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `Like`.`post` of type `Post!`
  """
  post: Post_Filter
  """
  ✨ Generated from Field `Like`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'Like'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Like_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Like_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Like_Filter
}
"""
✨ Generated key input type for table 'Like'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Like_Key {
  """
  ✨ Generated from Field `Like`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Like`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Like'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Like_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Like_Filter
}
"""
✨ Generated order input type for table 'Like'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Like_Order {
  """
  ✨ Generated from Field `Like`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Like`.`postId` of type `UUID!`
  """
  postId: OrderDirection
  """
  ✨ Generated from Field `Like`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `Like`.`post` of type `Post!`
  """
  post: Post_Order
  """
  ✨ Generated from Field `Like`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'Post'. It includes all necessary fields for creating or upserting rows into table.
"""
input Post_Data {
  """
  ✨ Generated from Field `Post`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Post`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Post`.`authorId` of type `UUID!`
  """
  authorId: UUID
  """
  ✨ `_expr` server value variant of `authorId` (✨ Generated from Field `Post`.`authorId` of type `UUID!`)
  """
  authorId_expr: UUID_Expr
  """
  ✨ Generated from Field `Post`.`author` of type `User!`
  """
  author: User_Key
  """
  ✨ Generated from Field `Post`.`content` of type `String!`
  """
  content: String
  """
  ✨ `_expr` server value variant of `content` (✨ Generated from Field `Post`.`content` of type `String!`)
  """
  content_expr: String_Expr
  """
  ✨ Generated from Field `Post`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `Post`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `Post`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
}
"""
✨ Generated filter input type for table 'Post'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Post_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Post_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Post_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Post_Filter!]
  """
  ✨ Generated from Field `Post`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Post`.`authorId` of type `UUID!`
  """
  authorId: UUID_Filter
  """
  ✨ Generated from Field `Post`.`author` of type `User!`
  """
  author: User_Filter
  """
  ✨ Generated from Field `Post`.`content` of type `String!`
  """
  content: String_Filter
  """
  ✨ Generated from Field `Post`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `Post`.`comments_on_post` of type `[Comment!]!`
  """
  comments_on_post: Comment_ListFilter
  """
  ✨ Generated from Field `Post`.`likes_on_post` of type `[Like!]!`
  """
  likes_on_post: Like_ListFilter
}
"""
✨ Generated first-row input type for table 'Post'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Post_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Post_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Post_Filter
}
"""
✨ Generated key input type for table 'Post'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Post_Key {
  """
  ✨ Generated from Field `Post`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Post`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Post'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Post_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Post_Filter
}
"""
✨ Generated order input type for table 'Post'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Post_Order {
  """
  ✨ Generated from Field `Post`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Post`.`authorId` of type `UUID!`
  """
  authorId: OrderDirection
  """
  ✨ Generated from Field `Post`.`author` of type `User!`
  """
  author: User_Order
  """
  ✨ Generated from Field `Post`.`content` of type `String!`
  """
  content: OrderDirection
  """
  ✨ Generated from Field `Post`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
}
"""
✨ Generated data input type for table 'User'. It includes all necessary fields for creating or upserting rows into table.
"""
input User_Data {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `User`.`picture` of type `String!`
  """
  picture: String
  """
  ✨ `_expr` server value variant of `picture` (✨ Generated from Field `User`.`picture` of type `String!`)
  """
  picture_expr: String_Expr
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: String
  """
  ✨ `_expr` server value variant of `username` (✨ Generated from Field `User`.`username` of type `String!`)
  """
  username_expr: String_Expr
}
"""
✨ Generated filter input type for table 'User'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input User_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [User_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: User_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [User_Filter!]
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `User`.`picture` of type `String!`
  """
  picture: String_Filter
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: String_Filter
  """
  ✨ Generated from Field `User`.`comments_on_author` of type `[Comment!]!`
  """
  comments_on_author: Comment_ListFilter
  """
  ✨ Generated from Field `User`.`likes_on_user` of type `[Like!]!`
  """
  likes_on_user: Like_ListFilter
  """
  ✨ Generated from Field `User`.`posts_on_author` of type `[Post!]!`
  """
  posts_on_author: Post_ListFilter
}
"""
✨ Generated first-row input type for table 'User'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input User_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [User_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: User_Filter
}
"""
✨ Generated key input type for table 'User'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input User_Key {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'User'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input User_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: User_Filter
}
"""
✨ Generated order input type for table 'User'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input User_Order {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `User`.`picture` of type `String!`
  """
  picture: OrderDirection
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: OrderDirection
}
