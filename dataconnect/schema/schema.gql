# Users
# Suppose a user can leave comments for posts
# user:comments is a one to many relationship
# post:comments is a one to many relationship,
# post:user is a many to many relationship

# Users
type User
  @table(name: "Users", singular: "user", plural: "users", key: ["id"]) {
  id: UUID! @col(name: "user_id") @default(expr: "uuidV4()")
  username: String! @col(name: "username", dataType: "varchar(30)")
  picture: String!
    @col(name: "picture")
    @default(
      value: "https://thumbs.dreamstime.com/b/default-avatar-profile-icon-vector-social-media-user-image-182145777.jpg"
    )
  # Generated from @ref in Post and Comment tables:
  # posts_on_user
  # comments_on_user
}

# Posts
type Post
  @table(name: "Posts", singular: "post", plural: "posts", key: ["id"]) {
  id: UUID! @col(name: "post_id") @default(expr: "uuidV4()")
  content: String!
  author: User! @ref
  # authorId: UUID! <- this is created by the above @ref
  createdAt: Timestamp! @default(expr: "request.time")
  # Generated from @ref in Comment and Like tables:
  # comments_on_post
  # likes_on_post
}

# Comments
type Comment
  @table(
    name: "Comments"
    singular: "comment"
    plural: "comments"
    key: ["id"]
  ) {
  id: UUID! @col(name: "comment_id") @default(expr: "uuidV4()")
  content: String!
  author: User! @ref
  # authorId: UUID! <- this is created by the above @ref
  post: Post! @ref
  # postId: UUID! <- this is created by the above @ref
  createdAt: Timestamp! @default(expr: "request.time")
}

# Likes
type Like @table(name: "Like", singular: "like", plural: "likes", key: ["id"]) {
  id: UUID! @col(name: "like_id") @default(expr: "uuidV4()")
  user: User! @ref
  post: Post! @ref
}
